{"ast":null,"code":"import axios from 'axios';\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/prod';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // CORS 우회 옵션 추가\n  withCredentials: false,\n  mode: 'cors'\n});\n\n// 요청 인터셉터 - 토큰 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 에러 처리\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$config$url;\n  // 로그인 API가 아닌 경우에만 리다이렉트\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !((_error$config = error.config) !== null && _error$config !== void 0 && (_error$config$url = _error$config.url) !== null && _error$config$url !== void 0 && _error$config$url.includes('/login'))) {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// 인증 관련 API\nexport const authAPI = {\n  // 로그인\n  login: async (businessNumber, password) => {\n    try {\n      const response = await api.post('/login', {\n        businessNumber,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      // 서버 응답을 그대로 반환하여 LoginPage에서 처리할 수 있도록 함\n      return {\n        ok: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '로그인에 실패했습니다.'\n      };\n    }\n  },\n  // 로그아웃\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n    }\n  },\n  // 토큰 검증\n  verifyToken: async () => {\n    try {\n      const response = await api.get('/auth/verify');\n      return response.data;\n    } catch (error) {\n      throw new Error('토큰 검증에 실패했습니다.');\n    }\n  }\n};\n\n// 사업 관련 API\nexport const businessAPI = {\n  // 사업 목록 조회\n  getBusinesses: async () => {\n    try {\n      const response = await api.get('/businesses');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || '사업 목록을 불러오는데 실패했습니다.');\n    }\n  },\n  // 사업 상세 조회\n  getBusiness: async businessId => {\n    try {\n      const response = await api.get(`/businesses/${businessId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || '사업 정보를 불러오는데 실패했습니다.');\n    }\n  },\n  // 사업 생성\n  createBusiness: async businessData => {\n    try {\n      const response = await api.post('/businesses', businessData);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || '사업 생성에 실패했습니다.');\n    }\n  },\n  // 사업 수정\n  updateBusiness: async (businessId, businessData) => {\n    try {\n      const response = await api.put(`/businesses/${businessId}`, businessData);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || '사업 수정에 실패했습니다.');\n    }\n  },\n  // 사업 삭제\n  deleteBusiness: async businessId => {\n    try {\n      const response = await api.delete(`/businesses/${businessId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || '사업 삭제에 실패했습니다.');\n    }\n  }\n};\n\n// 대상자 관련 API\nexport const targetAPI = {\n  // 대상자 목록 조회\n  getTargets: async businessId => {\n    try {\n      const response = await api.get(`/businesses/${businessId}/targets`);\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || '대상자 목록을 불러오는데 실패했습니다.');\n    }\n  },\n  // 대상자 상세 조회\n  getTarget: async (businessId, targetId) => {\n    try {\n      const response = await api.get(`/businesses/${businessId}/targets/${targetId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || '대상자 정보를 불러오는데 실패했습니다.');\n    }\n  },\n  // 대상자 생성\n  createTarget: async (businessId, targetData) => {\n    try {\n      const response = await api.post(`/businesses/${businessId}/targets`, targetData);\n      return response.data;\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      throw new Error(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || '대상자 생성에 실패했습니다.');\n    }\n  },\n  // 대상자 수정\n  updateTarget: async (businessId, targetId, targetData) => {\n    try {\n      const response = await api.put(`/businesses/${businessId}/targets/${targetId}`, targetData);\n      return response.data;\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      throw new Error(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.message) || '대상자 수정에 실패했습니다.');\n    }\n  },\n  // 대상자 삭제\n  deleteTarget: async (businessId, targetId) => {\n    try {\n      const response = await api.delete(`/businesses/${businessId}/targets/${targetId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || '대상자 삭제에 실패했습니다.');\n    }\n  },\n  // 대상자 검색\n  searchTargets: async (businessId, searchTerm) => {\n    try {\n      const response = await api.get(`/businesses/${businessId}/targets/search`, {\n        params: {\n          q: searchTerm\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || '대상자 검색에 실패했습니다.');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","withCredentials","mode","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$config","_error$config$url","status","url","includes","removeItem","window","location","href","authAPI","login","businessNumber","password","post","data","setItem","JSON","stringify","user","_error$response2","_error$response2$data","ok","message","logout","console","verifyToken","get","Error","businessAPI","getBusinesses","_error$response3","_error$response3$data","getBusiness","businessId","_error$response4","_error$response4$data","createBusiness","businessData","_error$response5","_error$response5$data","updateBusiness","put","_error$response6","_error$response6$data","deleteBusiness","delete","_error$response7","_error$response7$data","targetAPI","getTargets","_error$response8","_error$response8$data","getTarget","targetId","_error$response9","_error$response9$data","createTarget","targetData","_error$response0","_error$response0$data","updateTarget","_error$response1","_error$response1$data","deleteTarget","_error$response10","_error$response10$dat","searchTargets","searchTerm","params","q","_error$response11","_error$response11$dat"],"sources":["C:/bsproject_side/nanum_bundle/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API 기본 설정\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/prod';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // CORS 우회 옵션 추가\r\n  withCredentials: false,\r\n  mode: 'cors',\r\n});\r\n\r\n// 요청 인터셉터 - 토큰 추가\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 - 에러 처리\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // 로그인 API가 아닌 경우에만 리다이렉트\r\n    if (error.response?.status === 401 && !error.config?.url?.includes('/login')) {\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 인증 관련 API\r\nexport const authAPI = {\r\n  // 로그인\r\n  login: async (businessNumber, password) => {\r\n    try {\r\n      const response = await api.post('/login', {\r\n        businessNumber,\r\n        password,\r\n      });\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('authToken', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      // 서버 응답을 그대로 반환하여 LoginPage에서 처리할 수 있도록 함\r\n      return {\r\n        ok: false,\r\n        message: error.response?.data?.message || '로그인에 실패했습니다.'\r\n      };\r\n    }\r\n  },\r\n\r\n  // 로그아웃\r\n  logout: async () => {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('user');\r\n    }\r\n  },\r\n\r\n  // 토큰 검증\r\n  verifyToken: async () => {\r\n    try {\r\n      const response = await api.get('/auth/verify');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('토큰 검증에 실패했습니다.');\r\n    }\r\n  },\r\n};\r\n\r\n// 사업 관련 API\r\nexport const businessAPI = {\r\n  // 사업 목록 조회\r\n  getBusinesses: async () => {\r\n    try {\r\n      const response = await api.get('/businesses');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '사업 목록을 불러오는데 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 사업 상세 조회\r\n  getBusiness: async (businessId) => {\r\n    try {\r\n      const response = await api.get(`/businesses/${businessId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '사업 정보를 불러오는데 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 사업 생성\r\n  createBusiness: async (businessData) => {\r\n    try {\r\n      const response = await api.post('/businesses', businessData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '사업 생성에 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 사업 수정\r\n  updateBusiness: async (businessId, businessData) => {\r\n    try {\r\n      const response = await api.put(`/businesses/${businessId}`, businessData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '사업 수정에 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 사업 삭제\r\n  deleteBusiness: async (businessId) => {\r\n    try {\r\n      const response = await api.delete(`/businesses/${businessId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '사업 삭제에 실패했습니다.');\r\n    }\r\n  },\r\n};\r\n\r\n// 대상자 관련 API\r\nexport const targetAPI = {\r\n  // 대상자 목록 조회\r\n  getTargets: async (businessId) => {\r\n    try {\r\n      const response = await api.get(`/businesses/${businessId}/targets`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 목록을 불러오는데 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 대상자 상세 조회\r\n  getTarget: async (businessId, targetId) => {\r\n    try {\r\n      const response = await api.get(`/businesses/${businessId}/targets/${targetId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 정보를 불러오는데 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 대상자 생성\r\n  createTarget: async (businessId, targetData) => {\r\n    try {\r\n      const response = await api.post(`/businesses/${businessId}/targets`, targetData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 생성에 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 대상자 수정\r\n  updateTarget: async (businessId, targetId, targetData) => {\r\n    try {\r\n      const response = await api.put(`/businesses/${businessId}/targets/${targetId}`, targetData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 수정에 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 대상자 삭제\r\n  deleteTarget: async (businessId, targetId) => {\r\n    try {\r\n      const response = await api.delete(`/businesses/${businessId}/targets/${targetId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 삭제에 실패했습니다.');\r\n    }\r\n  },\r\n\r\n  // 대상자 검색\r\n  searchTargets: async (businessId, searchTerm) => {\r\n    try {\r\n      const response = await api.get(`/businesses/${businessId}/targets/search`, {\r\n        params: { q: searchTerm }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || '대상자 검색에 실패했습니다.');\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}